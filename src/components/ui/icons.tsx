import type { LucideIcon, LucideProps } from "lucide-react";
import { BadgeCheck, Menu, ShieldAlert, Star, Trash, User } from "lucide-react";
import * as React from "react"; // Import React

type Icons = Record<
  string,
  LucideIcon | ((props: LucideProps) => React.ReactNode)
>; // Adjusted the type

const iconComponents: Icons = {
  // github: Github,
  shield: ShieldAlert,
  menu: Menu,
  user: User,
  star: Star,
  trash: Trash,
  success: BadgeCheck, 
  google: () => {
    return (
      <svg
        fill="#000000"
        version="1.1"
        id="Capa_1"
        xmlns="http://www.w3.org/2000/svg"
        xmlnsXlink="http://www.w3.org/1999/xlink"
        viewBox="0 0 210 210"
        xmlSpace="preserve"
        height="1.5em"
        width="1.5em"
      >
        <path
          d="M0,105C0,47.103,47.103,0,105,0c23.383,0,45.515,7.523,64.004,21.756l-24.4,31.696C133.172,44.652,119.477,40,105,40
        c-35.841,0-65,29.159-65,65s29.159,65,65,65c28.867,0,53.398-18.913,61.852-45H105V85h105v20c0,57.897-47.103,105-105,105
        S0,162.897,0,105z"
        />
      </svg>
    );
  },
  github: (props) => {
    return (
      <svg
        fill="none"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        viewBox="0 0 24 24"
        height="1.5em"
        width="1.5em"
        {...props}
      >
        <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 00-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0020 4.77 5.07 5.07 0 0019.91 1S18.73.65 16 2.48a13.38 13.38 0 00-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 005 4.77a5.44 5.44 0 00-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 009 18.13V22" />
      </svg>
    );
  },
  contact: (props) => {
    return (
      <svg
        width="36"
        height="36"
        viewBox="0 0 48 48"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
      >
        <path
          d="M34 44C33.4333 44 32.958 43.808 32.574 43.424C32.19 43.04 31.9987 42.5653 32 42V39.5C30.7 39.0667 29.5333 38.408 28.5 37.524C27.4667 36.64 26.65 35.582 26.05 34.35C25.7833 33.85 25.7833 33.35 26.05 32.85C26.3167 32.35 26.7167 31.9833 27.25 31.75C27.7167 31.55 28.1833 31.5667 28.65 31.8C29.1167 32.0333 29.4833 32.3833 29.75 32.85C30.2833 33.8167 31.0167 34.5833 31.95 35.15C32.8833 35.7167 33.9 36 35 36H41C41.8333 36 42.542 36.292 43.126 36.876C43.71 37.46 44.0013 38.168 44 39V42C44 42.5667 43.808 43.042 43.424 43.426C43.04 43.81 42.5653 44.0013 42 44H34ZM38 34C36.9 34 35.958 33.608 35.174 32.824C34.39 32.04 33.9987 31.0987 34 30C34 28.9 34.392 27.958 35.176 27.174C35.96 26.39 36.9013 25.9987 38 26C39.1 26 40.042 26.392 40.826 27.176C41.61 27.96 42.0013 28.9013 42 30C42 31.1 41.608 32.042 40.824 32.826C40.04 33.61 39.0987 34.0013 38 34ZM34.15 14.1C31.0167 14.5 28.3413 15.8167 26.124 18.05C23.9067 20.2833 22.582 22.9667 22.15 26.1C22.0833 26.6667 21.85 27.1253 21.45 27.476C21.05 27.8267 20.5667 28.0013 20 28C19.4333 28 18.958 27.808 18.574 27.424C18.19 27.04 18.032 26.582 18.1 26.05C18.5667 21.7833 20.3087 18.1667 23.326 15.2C26.3433 12.2333 29.9847 10.5333 34.25 10.1C34.75 10.0333 35.1667 10.192 35.5 10.576C35.8333 10.96 36 11.4347 36 12C36 12.5333 35.8247 13 35.474 13.4C35.1233 13.8 34.682 14.0333 34.15 14.1ZM34.45 22.2C33.4167 22.4667 32.5167 22.9747 31.75 23.724C30.9833 24.4733 30.4667 25.3653 30.2 26.4C30.0667 26.8667 29.792 27.25 29.376 27.55C28.96 27.85 28.5013 28 28 28C27.4333 28 26.9667 27.8247 26.6 27.474C26.2333 27.1233 26.0833 26.7153 26.15 26.25C26.5167 24.15 27.4587 22.3667 28.976 20.9C30.4933 19.4333 32.3013 18.5167 34.4 18.15C34.8667 18.0833 35.25 18.242 35.55 18.626C35.85 19.01 36 19.468 36 20C36 20.5 35.858 20.9587 35.574 21.376C35.29 21.7933 34.9153 22.068 34.45 22.2ZM6.00001 22C5.43334 22 4.95801 21.808 4.57401 21.424C4.19001 21.04 3.99867 20.5653 4.00001 20V17C4.00001 16.1667 4.29201 15.458 4.87601 14.874C5.46001 14.29 6.16801 13.9987 7.00001 14H13C14.1 14 15.1167 13.7167 16.05 13.15C16.9833 12.5833 17.7167 11.8167 18.25 10.85C18.5167 10.3833 18.8833 10.008 19.35 9.724C19.8167 9.44 20.3 9.382 20.8 9.55C21.3667 9.71667 21.8 10.0333 22.1 10.5C22.4 10.9667 22.45 11.45 22.25 11.95C21.6833 13.3167 20.85 14.4667 19.75 15.4C18.65 16.3333 17.4 17.0333 16 17.5V20C16 20.5667 15.808 21.042 15.424 21.426C15.04 21.81 14.5653 22.0013 14 22H6.00001ZM10 12C8.90001 12 7.95801 11.608 7.17401 10.824C6.39001 10.04 5.99867 9.09867 6.00001 8C6.00001 6.9 6.39201 5.958 7.17601 5.174C7.96001 4.39 8.90134 3.99867 10 4C11.1 4 12.042 4.392 12.826 5.176C13.61 5.96 14.0013 6.90134 14 8C14 9.1 13.608 10.042 12.824 10.826C12.04 11.61 11.0987 12.0013 10 12Z"
          fill="#2F5BF6"
        />
      </svg>
    );
  },
  edit: (props) => {
    return (
      <svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
      >
        <g id="ic:twotone-edit">
          <path
            id="Vector"
            opacity="0.3"
            d="M5 18.08V19H5.92L14.98 9.94002L14.06 9.02002L5 18.08Z"
            fill="currentColor"
          />
          <path
            id="Vector_2"
            d="M20.71 7.04C20.8027 6.94749 20.8762 6.8376 20.9264 6.71662C20.9766 6.59565 21.0024 6.46597 21.0024 6.335C21.0024 6.20403 20.9766 6.07435 20.9264 5.95338C20.8762 5.8324 20.8027 5.72251 20.71 5.63L18.37 3.29C18.17 3.09 17.92 3 17.66 3C17.4 3 17.15 3.1 16.96 3.29L15.13 5.12L18.88 8.87L20.71 7.04ZM3 17.25V21H6.75L17.81 9.94L14.06 6.19L3 17.25ZM5.92 19H5V18.08L14.06 9.02L14.98 9.94L5.92 19Z"
            fill="currentColor"
          />
        </g>
      </svg>
    );
  },
};


const NoIconFound: React.FC = () => {
  return null;
};

interface IconsProps {
  iconName: string;
  className?: string; // Add className prop
}

const Icons: React.FC<IconsProps> = ({ iconName, className }) => {
  const iconComponent = iconComponents[iconName.toLowerCase()] ?? NoIconFound;

  // Pass the className prop to the underlying icon component if it accepts props
  return <>{React.createElement(iconComponent, { className })}</>;
};

export default Icons;
